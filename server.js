// index.js

// --- –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –ó–ê–í–ò–°–ò–ú–û–°–¢–ï–ô ---
// 'node-telegram-bot-api' –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å Telegram Bot API
// 'express' –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å –≤–µ–±—Ö—É–∫–∏ –æ—Ç Telegram
// 'crypto' –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö, –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –æ—Ç Telegram
const TelegramBot = require('node-telegram-bot-api');
const express = require('express');
const crypto = require('crypto');

// --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ---
// –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –æ—Ç @BotFather
const token = '8203577700:AAHBPcxw4y5kT4trl_bfZY4QRBQ99Q0S2E8';

// URL –≤–∞—à–µ–≥–æ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –≥–¥–µ –æ–Ω–æ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ
const webAppUrl = 'https://lively-malabi-81b16c.netlify.app';

// URL –≤–∞—à–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π Telegram –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.
// –í–ê–ñ–ù–û: –î–ª—è —Ä–∞–±–æ—Ç—ã –≤–µ–±—Ö—É–∫–æ–≤ —É –≤–∞—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É–±–ª–∏—á–Ω—ã–π IP-–∞–¥—Ä–µ—Å –∏ SSL-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç (HTTPS).
// –ü—Ä–∏ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–∏ –∑–∞–º–µ–Ω–∏—Ç–µ 'YOUR_SERVER_URL' –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å –≤–∞—à–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞.
const webhookUrl = 'https://sdfsdf-42gs.onrender.com'; // –ü—Ä–∏–º–µ—Ä: https://your-domain.com

// --- –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ---
const bot = new TelegramBot(token);
const app = express();

// –ò—Å–ø–æ–ª—å–∑—É–µ–º express.json() –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON-—Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
app.use(express.json());

// --- –ù–ê–°–¢–†–û–ô–ö–ê –í–ï–ë–•–£–ö–ê ---
// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫. Telegram –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤—Å–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞ —ç—Ç–æ—Ç URL.
// `${webhookUrl}/webhook/${token}` - —ç—Ç–æ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Å–ø–æ—Å–æ–± —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –∑–∞–ø—Ä–æ—Å—ã –ø—Ä–∏—Ö–æ–¥—è—Ç –∏–º–µ–Ω–Ω–æ –æ—Ç Telegram.
bot.setWebHook(`${webhookUrl}/webhook/${token}`)
    .then(() => console.log('–í–µ–±—Ö—É–∫ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!'))
    .catch(err => console.error('–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–µ–±—Ö—É–∫–∞:', err));

// --- –û–ë–†–ê–ë–û–¢–ß–ò–ö –í–ï–ë–•–£–ö–û–í ---
// –°–æ–∑–¥–∞–µ–º POST-–º–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø—Ä–∏–µ–º–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ç Telegram
app.post(`/webhook/${token}`, (req, res) => {
    bot.processUpdate(req.body);
    res.sendStatus(200); // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å 200 OK, —á—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
});


// --- –§–£–ù–ö–¶–ò–Ø –í–ê–õ–ò–î–ê–¶–ò–ò INITDATA ---
/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ª–∏–Ω–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö, –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –æ—Ç Web App.
 * @param {string} initData - –°—Ç—Ä–æ–∫–∞ initData –∏–∑ Telegram.WebApp.initData.
 * @param {string} botToken - –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞.
 * @returns {boolean} - True, –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –≤–∞–ª–∏–¥–Ω—ã, –∏–Ω–∞—á–µ false.
 */
function validateInitData(initData, botToken) {
    try {
        const params = new URLSearchParams(initData);
        const hash = params.get('hash');
        if (!hash) return false;

        params.delete('hash');
        params.sort(); // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ –∞–ª—Ñ–∞–≤–∏—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ

        let dataCheckString = '';
        for (const [key, value] of params.entries()) {
            dataCheckString += `${key}=${value}\n`;
        }
        dataCheckString = dataCheckString.slice(0, -1);

        const secretKey = crypto.createHmac('sha256', 'WebAppData').update(botToken).digest();
        const hmac = crypto.createHmac('sha256', secretKey).update(dataCheckString).digest('hex');

        return hmac === hash;
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:", error);
        return false;
    }
}


// --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î –ò –°–û–û–ë–©–ï–ù–ò–ô ---

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
// –ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
// –∏ –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –≤–∞—à–µ–≥–æ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
bot.onText(/\/start/, (msg) => {
    const chatId = msg.chat.id;
    const welcomeMessage = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ TerraRun! üèÉ‚Äç‚ôÇÔ∏è\n\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç—É –∏ –Ω–∞—á–∞—Ç—å –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—Ç—å —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏!";

    // –°–æ–∑–¥–∞–µ–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è Web App
    const options = {
        reply_markup: {
            inline_keyboard: [
                [{
                    text: 'üó∫Ô∏è –û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç—É',
                    web_app: {
                        url: webAppUrl,
                        request_location_access: true // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
                    }
                }]
            ]
        }
    };

    bot.sendMessage(chatId, welcomeMessage, options);
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /menu –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é
bot.onText(/\/menu/, (msg) => {
    const chatId = msg.chat.id;
    bot.setChatMenuButton({
        chat_id: chatId,
        menu_button: {
            type: 'web_app',
            text: '–ó–∞–ø—É—Å—Ç–∏—Ç—å',
            web_app: { 
                url: webAppUrl,
                request_location_access: true // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
            }
        }
    }).then(() => {
        bot.sendMessage(chatId, '–ö–Ω–æ–ø–∫–∞ –º–µ–Ω—é –æ–±–Ω–æ–≤–ª–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –æ–Ω–∞ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ TerraRun –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏.');
    }).catch(err => {
        console.error('–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é:', err);
    });
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /resetmenu –¥–ª—è —Å–±—Ä–æ—Å–∞ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é
bot.onText(/\/resetmenu/, (msg) => {
    const chatId = msg.chat.id;
    bot.setChatMenuButton({
        chat_id: chatId,
        menu_button: { type: 'default' }
    }).then(() => {
        bot.sendMessage(chatId, '–ö–Ω–æ–ø–∫–∞ –º–µ–Ω—é —Å–±—Ä–æ—à–µ–Ω–∞ –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π.');
    }).catch(err => {
        console.error('–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é:', err);
    });
});


// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö, –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –∏–∑ Web App
// –°—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç, –∫–æ–≥–¥–∞ –≤ –≤–∞—à–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è `tg.sendData(...)`
bot.on('message', (msg) => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ web_app
    if (msg.web_app_data) {
        const chatId = msg.chat.id;
        try {
            // –í–ê–ñ–ù–û: –î–ª—è —Ä–∞–±–æ—Ç—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤–∞—à–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å
            // –æ–±—ä–µ–∫—Ç, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –∏ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ, –∏ —Å—Ç—Ä–æ–∫—É initData.
            // –ü—Ä–∏–º–µ—Ä –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞:
            // const dataToSend = { type: 'new_post', title: '...' };
            // const dataWithAuth = { payload: dataToSend, _auth: Telegram.WebApp.initData };
            // Telegram.WebApp.sendData(JSON.stringify(dataWithAuth));

            const receivedJson = JSON.parse(msg.web_app_data.data);
            
            // --- –í–ê–õ–ò–î–ê–¶–ò–Ø –î–ê–ù–ù–´–• ---
            if (!validateInitData(receivedJson._auth, token)) {
                console.error('Validation failed for data from Web App. Hash mismatch.');
                bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏. –î–∞–Ω–Ω—ã–µ –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—Ä–∏–Ω—è—Ç—ã.');
                return; // –ü—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø—Ä–æ—à–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É
            }
            
            console.log('Validation successful! Processing data...');
            const data = receivedJson.payload; // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ–ª–µ–∑–Ω—É—é –Ω–∞–≥—Ä—É–∑–∫—É

            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∏—Ö —Ç–∏–ø–∞
            if (data.type === 'new_post') {
                let notificationText;

                // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–≥–æ, –±—ã–ª–∞ –ª–∏ –∑–∞—Ö–≤–∞—á–µ–Ω–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è
                if (data.area && data.area > 0) {
                    const area = data.area;
                    const formattedArea = area > 10000 ?
                        `${(area / 1000000).toFixed(2)} –∫–º¬≤` :
                        `${Math.round(area)} –º¬≤`;
                    notificationText = `üéâ **–ù–æ–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ!**\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å *${msg.from.first_name}* —Ç–æ–ª—å–∫–æ —á—Ç–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–ª –ø–æ—Å—Ç *"${data.title}"* –∏ –∑–∞—Ö–≤–∞—Ç–∏–ª *${formattedArea}* –Ω–æ–≤–æ–π —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏!`;
                } else {
                    notificationText = `‚úçÔ∏è **–ù–æ–≤—ã–π –ø–æ—Å—Ç –≤ –ª–µ–Ω—Ç–µ!**\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å *${msg.from.first_name}* –æ–ø—É–±–ª–∏–∫–æ–≤–∞–ª –ø–æ—Å—Ç: *"${data.title}"*`;
                }

                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç
                bot.sendMessage(chatId, notificationText, {
                    parse_mode: 'Markdown'
                });
            }

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Web App:', error);
            bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.');
        }
    }
});


// --- –ó–ê–ü–£–°–ö –°–ï–†–í–ï–†–ê ---
// –£–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Ä—Ç, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞—à —Å–µ—Ä–≤–µ—Ä.
// –ò—Å–ø–æ–ª—å–∑—É–µ–º process.env.PORT –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Ö–æ—Å—Ç–∏–Ω–≥-–ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, Heroku).
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
    console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
});
